generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public"]
}

model calculator_sessions {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String         @db.Uuid
  category    CalculatorType
  inputs        Json
  result        Float
  result_unit   String?
  date    DateTime      @db.Date
  users_profile users_profile  @relation(fields: [user_id], references: [id], onDelete: NoAction, map: "CalculatorSession_userId_fkey")

  @@index([date], map: "CalculatorSession_date_idx")
  @@index([user_id, category], map: "CalculatorSession_userId_category_idx")
  @@schema("public")
}

model client_max_lifts {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  client_id     String        @db.Uuid
  list_exercise_id String     @db.Uuid
  max_weight    Float?        // For weight-based exercises (can be null for reps-based)
  max_reps      Int?          // NEW: For reps-based exercises (can be null for weight-based)
  exercise_type ExerciseType  @default(WEIGHT_BASED) // NEW: Track exercise type
  last_updated  DateTime
  date_achieved DateTime      @default(now())
  set_id        String?       @db.Uuid // NEW: Link to specific exercise_logs entry
  is_invalid    Boolean       @default(false) // NEW: Allow users to invalidate suspicious PRs
  workout_exercise_lists workout_exercise_lists @relation(fields: [list_exercise_id], references: [id], onDelete: NoAction, map: "ClientMaxLift_listExerciseId_fkey")
  users_profile users_profile @relation(fields: [client_id], references: [id], onDelete: NoAction, map: "ClientMaxLift_clientId_fkey")
  exercise_logs exercise_logs? @relation(fields: [set_id], references: [id], onDelete: SetNull, map: "ClientMaxLift_setId_fkey")

  @@index([client_id, list_exercise_id], map: "ClientMaxLift_clientId_listExerciseId_idx")
  @@index([set_id], map: "ClientMaxLift_setId_idx")
  @@index([client_id, list_exercise_id, is_invalid], map: "ClientMaxLift_clientId_listExerciseId_invalid_idx")
  @@schema("public")
}

model exercise_logs {
  id                       String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  client_id                String                   @db.Uuid
  set_id                   String                   @db.Uuid
  performed_date           DateTime                 @default(now()) @db.Date
  scheduled_date            DateTime                 @db.Date
  weight_used              Float?
  reps_done                Int?
  rpe                      Int?                     //how to make it 1-10 scale?     
  notes                    String?
  users_profile            users_profile            @relation(fields: [client_id], references: [id], onDelete: NoAction, map: "ExerciseLog_clientId_fkey")
  workout_set_instructions workout_set_instructions @relation(fields: [set_id], references: [id], onDelete: NoAction, map: "ExerciseLog_setId_fkey")
  client_max_lifts         client_max_lifts[]       // NEW: One-to-many relation to PRs linked to this set

  @@schema("public")
}

model subscription_events {
  id                   String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id              String        @db.Uuid
  event_type           String
  payment_id           String?
  amount               Decimal?
  created_at           DateTime?     @default(now())
  metadata             Json?
  subscription_id      String?
  subscription_plan_id String?
  webhook_event_id     String?        @db.Uuid
  webhook_event        webhook_events?     @relation(fields: [webhook_event_id], references: [id], onDelete: NoAction, map: "SubscriptionEvent_webhookEventId_fkey")
  users_profile        users_profile       @relation(fields: [user_id], references: [id], onDelete: NoAction, map: "SubscriptionEvent_userId_fkey")

  @@index([event_type], map: "SubscriptionEvent_eventType_idx")
  @@index([user_id], map: "SubscriptionEvent_userId_idx")
  @@schema("public")
}

model subscription_plans {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String
  category           SubscriptionCategory
  plan_type          PlanType             @default(ONLINE)
  price              Decimal              @db.Decimal(10, 2)
  features           Json?
  razorpay_plan_id   String
  billing_period     String               @default("monthly")
  billing_cycle      Int                  @default(1)
  is_active          Boolean?              @default(true)
  user_subscriptions user_subscriptions[]

  @@schema("public")
}

model trainer_clients {
  id                                                      String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  trainer_id                                              String        @db.Uuid
  client_id                                               String        @db.Uuid
  category                                                SubscriptionCategory? // New field for category-specific assignments
  assigned_at                                             DateTime      @default(now())
  client  users_profile @relation("TrainerClient_Client", fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "TrainerClient_clientId_fkey")
  trainer users_profile @relation("TrainerClient_Trainer", fields: [trainer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "TrainerClient_trainerId_fkey")

  @@unique([trainer_id, client_id, category], map: "TrainerClient_trainerId_clientId_category_key")
  @@schema("public")
}

model transformation_photos {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String        @db.Uuid
  image_url       String
  uploaded_at     DateTime?     @default(now())
  privacy_setting PhotoPrivacy? @default(PRIVATE)
  photo_type      PhotoType
  description     String?
  photo_date      DateTime      @default(now()) @db.Date
  users_profile   users_profile @relation(fields: [user_id], references: [id], onDelete: NoAction, map: "TransformationPhoto_userId_fkey")

  @@schema("public")
}

model user_subscriptions {
  id                       String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                  String              @db.Uuid
  plan_id                  String              @db.Uuid
  status                   SubscriptionStatus? @default(ACTIVE)
  start_date               DateTime?           @default(now())
  end_date                 DateTime?
  payment_status           PaymentStatus?      @default(PENDING)
  razorpay_subscription_id String?
  current_start            DateTime?
  current_end              DateTime?
  next_charge_at           DateTime?
  total_count              Int?
  paid_count               Int?
  remaining_count          Int?
  retry_attempts           Int?                @default(0)
   //  NEW FIELDS FOR CANCEL FUNCTIONALITY
  cancel_requested_at      DateTime?           // When user requested cancellation
  cancel_at_cycle_end      Boolean?            @default(false) // Whether to cancel at cycle end
  subscription_plans       subscription_plans  @relation(fields: [plan_id], references: [id], onDelete: NoAction, map: "UserSubscription_planId_fkey")
  users_profile            users_profile       @relation(fields: [user_id], references: [id], onDelete: NoAction, map: "UserSubscription_userId_fkey")

  @@index([razorpay_subscription_id], map: "UserSubscription_razorpaySubscriptionId_idx")
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model users_profile {
  id                                                        String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                                     String                   @unique(map: "User_email_key")
  name                                                      String
  role                                                      Role                     @default(CLIENT)
  created_at                                                DateTime                 @default(now())
  weight                                                    Float?
  weight_unit                                               WeightUnit?              @default(KG)
  height                                                    Float?
  height_unit                                               HeightUnit?              @default(CM)
  date_of_birth                                             DateTime?
  gender                                                    Gender?
  activity_level                                            ActivityLevel?           @default(SEDENTARY)
  profile_completed                                         Boolean                  @default(false)
  neck                                                      Float?
  waist                                                     Float?
  hips                                                      Float?
  forearm                                                   Float?
  wrist                                                     Float?
  country                                                   country?                  
  phone                                                     String?
  onboarding_completed                                      DateTime?
  calculator_sessions                                       calculator_sessions[]
  client_max_lifts                                          client_max_lifts[]
  exercise_logs                                             exercise_logs[]
  subscription_events                                       subscription_events[]
  trainerClientsAsClient  trainer_clients[] @relation("TrainerClient_Client")
  trainerClientsAsTrainer trainer_clients[] @relation("TrainerClient_Trainer")
  transformation_photos                                     transformation_photos[]
  user_subscriptions                                        user_subscriptions[]
  weight_logs                                               weight_logs[]
  workout_exercise_lists                                    workout_exercise_lists[]
  workout_plans_as_client                                   workout_plans[]          @relation("ClientWorkoutPlans")
  workout_plans_as_trainer                                  workout_plans[]          @relation("TrainerWorkoutPlans")
  workout_day_videos                                        workout_day_videos[]     // NEW: One-to-many relationship for workout videos

  @@schema("public")
}

model webhook_events {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  webhook_id   String   @unique(map: "WebhookEvent_webhookId_key")
  event_type   String
  processed_at DateTime @default(now())
  payload      Json
  status       String   @default("success")
  error        String?
  retry_count  Int      @default(0)
  subscription_events subscription_events[]

  @@index([event_type], map: "WebhookEvent_eventType_idx")
  @@index([webhook_id], map: "WebhookEvent_webhookId_idx")
  @@schema("public")
}

model weight_logs {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String        @db.Uuid
  weight        Float
  weight_unit   WeightUnit    @default(KG)
  date_logged   DateTime      @db.Date
  notes         String?
  created_at    DateTime      @default(now())
  users_profile users_profile @relation(fields: [user_id], references: [id], onDelete: NoAction, map: "WeightLog_userId_fkey")
  

  @@unique([user_id, date_logged], map: "WeightLog_userId_dateLogged_key")
  @@index([user_id, date_logged], map: "WeightLog_userId_dateLogged_idx")
  @@schema("public")
}

model workout_day_exercises {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workout_day_id           String                     @db.Uuid
  list_exercise_id         String                     @db.Uuid
  instructions             String?
  order                    Int
  youtube_link             String?
  notes                    String?
  workout_exercise_lists   workout_exercise_lists     @relation(fields: [list_exercise_id], references: [id], onDelete: NoAction, map: "WorkoutDayExercise_listExerciseId_fkey")
  workout_days             workout_days               @relation(fields: [workout_day_id], references: [id], onDelete: Cascade, map: "WorkoutDayExercise_workoutDayId_fkey")
  frontend_uid            String?                    // NEW: For stable matching
  is_deleted               Boolean                    @default(false)
  deleted_at               DateTime?
  workout_set_instructions workout_set_instructions[]

  @@index([frontend_uid])
  @@index([workout_day_id, is_deleted])
  @@schema("public")
}

model workout_days {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  plan_id               String                  @db.Uuid
  week_number           Int
  day_number            Int

  /// NEW: calendar date of this day (always Monday..Sunday)
  /// Use DateTime + @db.Date so only the date portion is stored.
  day_date      DateTime @db.Date

  title                 String
  workout_type          String?
  is_deleted            Boolean                 @default(false) // NEW: Soft delete
  deleted_at            DateTime?               // NEW: Soft delete timestamp
  workout_day_exercises workout_day_exercises[]
  workout_day_videos    workout_day_videos?     // NEW: One-to-one relationship for workout videos
  workout_plans         workout_plans           @relation(fields: [plan_id], references: [id], onDelete: Cascade, map: "WorkoutDay_planId_fkey")

  @@schema("public")
  //@@unique([plan_id, day_date])              // never two days on the same date in one plan
  @@index([plan_id, day_date])
  @@index([plan_id, is_deleted])             // NEW: Index for filtering soft-deleted days
}

model workout_exercise_lists {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String                  @unique(map: "WorkoutExerciseList_name_key")
  youtube_link          String?
  gif_url               String?
  type                  BodyPart
  is_reps_based         Boolean                 @default(false) // NEW: Indicates if exercise is bodyweight-based (pushups, pull-ups, etc.)
  created_at            DateTime                @default(now())
  created_by_id         String                  @db.Uuid
  workout_day_exercises workout_day_exercises[]
  users_profile         users_profile           @relation(fields: [created_by_id], references: [id], onDelete: NoAction, map: "WorkoutExerciseList_createdById_fkey")
  client_max_lifts      client_max_lifts[]
  @@index([name], map: "WorkoutExerciseList_name_idx")
  @@index([type], map: "WorkoutExerciseList_type_idx")
  @@schema("public")
}

model workout_plans {
  id                                                    String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                                                 String
  trainer_id                                            String          @db.Uuid
  client_id                                             String          @db.Uuid
  start_date                                            DateTime        @db.Date
  end_date                                              DateTime        @db.Date
  duration_in_weeks                                     Int
  category                                              WorkoutCategory
  description                                           String?         @default("")
  created_at                                            DateTime        @default(now())
  workout_days                                          workout_days[]
  intensity_mode                                        IntensityMode   @default(ABSOLUTE)
  status                                                WorkoutPlanStatus @default(DRAFT)
  client   users_profile @relation("ClientWorkoutPlans", fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "WorkoutPlan_clientId_fkey")
  trainer  users_profile @relation("TrainerWorkoutPlans", fields: [trainer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "WorkoutPlan_trainerId_fkey")
  @@schema("public")
}

model workout_set_instructions {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  exercise_id           String                @db.Uuid
  set_number            Int
  reps                  Int?
  intensity             IntensityMode?
  weight_prescribed     Float?
  rest_time             Int?
  notes                 String?
  is_deleted            Boolean               @default(false) // NEW: Soft delete
  deleted_at            DateTime?             // NEW: Soft delete timestamp
  exercise_logs         exercise_logs[]
  workout_day_exercises workout_day_exercises @relation(fields: [exercise_id], references: [id], onDelete: Cascade, map: "WorkoutSetInstruction_exerciseId_fkey")
  
  @@index([exercise_id, is_deleted])
  @@schema("public")
}

model workout_day_videos {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workout_day_id String     @db.Uuid
  client_id     String      @db.Uuid
  video_url     String      // The cloud link (Google Drive, Dropbox, etc.)
  video_title   String?     // Optional title/description
  uploaded_at   DateTime    @default(now())
  reviewed_at   DateTime?   // When trainer reviewed it
  trainer_notes String?     // Trainer feedback/notes
  workout_days  workout_days @relation(fields: [workout_day_id], references: [id], onDelete: Cascade, map: "WorkoutDayVideo_workoutDayId_fkey")
  users_profile users_profile @relation(fields: [client_id], references: [id], onDelete: NoAction, map: "WorkoutDayVideo_clientId_fkey")

  @@unique([workout_day_id]) // Only one video per workout day
  @@index([client_id], map: "WorkoutDayVideo_clientId_idx")
  @@schema("public")
}

enum Role {
  CLIENT
  TRAINER
  FITNESS_TRAINER
  PSYCHOLOGY_TRAINER
  MANIFESTATION_TRAINER
  FITNESS_TRAINER_ADMIN
  ADMIN

  @@schema("public")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED

  @@schema("public")
}

enum PhotoPrivacy {
  PRIVATE
  PUBLIC

  @@schema("public")
}

enum PhotoType {
  BEFORE
  AFTER

  @@schema("public")
}

enum PlanType {
  ONLINE
  IN_PERSON
  SELF_PACED

  @@schema("public")
}

enum SubscriptionCategory {
  FITNESS
  PSYCHOLOGY
  MANIFESTATION
  ALL_IN_ONE

  @@schema("public")
}

enum SubscriptionStatus {
  CREATED
  ACTIVE
  EXPIRED
  CANCELLED
  AUTHENTICATED
  PENDING
  PAUSED
  HALTED
  COMPLETED

  @@schema("public")
}

enum WorkoutCategory {
  HYPERTROPHY
  STRENGTH
  RELOAD
  DELOAD
  ENDURANCE

  @@schema("public")
}

enum BodyPart {
  CHEST
  BACK
  SHOULDERS
  BICEPS
  TRICEPS
  LEGS
  CORE
  CARDIO
  FULL_BODY

  @@schema("public")
}

enum CalculatorType {
  BMI
  BMR
  BODY_FAT
  CALORIE_NEEDS
  IDEAL_WEIGHT
  LEAN_BODY_MASS
  ONE_REP_MAX
  MACRO_SPLIT

  @@schema("public")
}

enum ActivityLevel {
  SEDENTARY
  LIGHTLY_ACTIVE
  MODERATELY_ACTIVE
  VERY_ACTIVE
  EXTRA_ACTIVE

  @@schema("public")
}

enum WorkoutPlanStatus {
  DRAFT
  PUBLISHED
  ARCHIVED

  @@schema("public")
}

enum Gender {
  MALE
  FEMALE

  @@schema("public")
}

enum WeightUnit {
  KG
  LB

  @@schema("public")
}

enum IntensityMode {
  ABSOLUTE
  PERCENT

  @@schema("public")
}

enum HeightUnit {
  CM
  INCHES
  FEET

  @@schema("public")
}

enum ExerciseType {
  WEIGHT_BASED    // Traditional exercises with weight (bench press, squats, etc.)
  REPS_BASED      // Bodyweight exercises (pushups, pull-ups, etc.)

  @@schema("public")
}

enum country {
  ASCENSION_ISLAND
  ANDORRA
  UNITED_ARAB_EMIRATES
  AFGHANISTAN
  ANTIGUA_AND_BARBUDA
  ANGUILLA
  ALBANIA
  ARMENIA
  ANGOLA
  ANTARCTICA
  ARGENTINA
  AMERICAN_SAMOA
  AUSTRIA
  AUSTRALIA
  ARUBA
  ALAND_ISLANDS
  AZERBAIJAN
  BOSNIA_HERZEGOVINA
  BARBADOS
  BANGLADESH
  BELGIUM
  BURKINA_FASO
  BULGARIA
  BAHRAIN
  BURUNDI
  BENIN
  SAINT_BARTHELEMY
  BERMUDA
  BRUNEI_DARUSSALAM
  BOLIVIA
  BONAIRE_SINT_EUSTATIUS_AND_SABA
  BRAZIL
  BAHAMAS
  BHUTAN
  BOUVET_ISLAND
  BOTSWANA
  BELARUS
  BELIZE
  CANADA
  COCOS_KEELING_ISLANDS
  DEMOCRATIC_REPUBLIC_OF_CONGO
  CENTRAL_AFRICAN_REPUBLIC
  REPUBLIC_OF_CONGO
  SWITZERLAND
  COTE_DIVOIRE
  COOK_ISLANDS
  CHILE
  CAMEROON
  CHINA
  COLOMBIA
  COSTA_RICA
  CUBA
  CABO_VERDE
  CURACAO
  CHRISTMAS_ISLAND
  CYPRUS
  CZECH_REPUBLIC
  GERMANY
  DJIBOUTI
  DENMARK
  DOMINICA
  DOMINICAN_REPUBLIC
  ALGERIA
  ECUADOR
  ESTONIA
  EGYPT
  WESTERN_SAHARA
  ERITREA
  SPAIN
  ETHIOPIA
  FINLAND
  FIJI
  FALKLAND_ISLANDS
  MICRONESIA
  FAROE_ISLANDS
  FRANCE
  GABON
  UNITED_KINGDOM
  GRENADA
  GEORGIA
  FRENCH_GUIANA
  GUERNSEY
  GHANA
  GIBRALTAR
  GREENLAND
  GAMBIA
  GUINEA
  GUADELOUPE
  EQUATORIAL_GUINEA
  GREECE
  SOUTH_GEORGIA_AND_THE_SOUTH_SANDWICH_ISLANDS
  GUATEMALA
  GUAM
  GUINEA_BISSAU
  GUYANA
  HONG_KONG
  HEARD_ISLAND_AND_MCDONALD_ISLANDS
  HONDURAS
  CROATIA
  HAITI
  HUNGARY
  INDONESIA
  IRELAND
  ISRAEL
  ISLE_OF_MAN
  INDIA
  BRITISH_INDIAN_OCEAN_TERRITORY
  IRAQ
  IRAN
  ICELAND
  ITALY
  JERSEY
  JAMAICA
  JORDAN
  JAPAN
  KENYA
  KYRGYZSTAN
  CAMBODIA
  KIRIBATI
  COMOROS
  SAINT_KITTS_AND_NEVIS
  NORTH_KOREA
  SOUTH_KOREA
  KUWAIT
  CAYMAN_ISLANDS
  KAZAKHSTAN
  LAOS
  LEBANON
  SAINT_LUCIA
  LIECHTENSTEIN
  SRI_LANKA
  LIBERIA
  LESOTHO
  LITHUANIA
  LUXEMBOURG
  LATVIA
  LIBYA
  MOROCCO
  MONACO
  MOLDOVA
  MONTENEGRO
  SAINT_MARTIN
  MADAGASCAR
  MARSHALL_ISLANDS
  NORTH_MACEDONIA
  MALI
  MYANMAR
  MONGOLIA
  MACAO
  NORTHERN_MARIANA_ISLANDS
  MARTINIQUE
  MAURITANIA
  MONTSERRAT
  MALTA
  MAURITIUS
  MALDIVES
  MALAWI
  MEXICO
  MALAYSIA
  MOZAMBIQUE
  NAMIBIA
  NEW_CALEDONIA
  NIGER
  NORFOLK_ISLAND
  NIGERIA
  NICARAGUA
  NETHERLANDS
  NORWAY
  NEPAL
  NAURU
  NIUE
  NEW_ZEALAND
  OMAN
  PANAMA
  PERU
  FRENCH_POLYNESIA
  PAPUA_NEW_GUINEA
  PHILIPPINES
  PAKISTAN
  POLAND
  SAINT_PIERRE_AND_MIQUELON
  PITCAIRN
  PUERTO_RICO
  PALESTINE
  PORTUGAL
  PALAU
  PARAGUAY
  QATAR
  REUNION
  ROMANIA
  SERBIA
  RUSSIA
  RWANDA
  SAUDI_ARABIA
  SOLOMON_ISLANDS
  SEYCHELLES
  SUDAN
  SWEDEN
  SINGAPORE
  SAINT_HELENA
  SLOVENIA
  SVALBARD_AND_JAN_MAYEN
  SLOVAKIA
  SIERRA_LEONE
  SAN_MARINO
  SENEGAL
  SOMALIA
  SURINAME
  SOUTH_SUDAN
  SAO_TOME_AND_PRINCIPE
  EL_SALVADOR
  SINT_MAARTEN
  SYRIA
  ESWATINI
  TURKS_AND_CAICOS_ISLANDS
  CHAD
  FRENCH_SOUTHERN_TERRITORIES
  TOGO
  THAILAND
  TAJIKISTAN
  TOKELAU
  TIMOR_LESTE
  TURKMENISTAN
  TUNISIA
  TONGA
  TURKEY
  TRINIDAD_AND_TOBAGO
  TUVALU
  TAIWAN
  TANZANIA
  UKRAINE
  UGANDA
  UNITED_STATES_MINOR_OUTLYING_ISLANDS
  UNITED_STATES
  URUGUAY
  UZBEKISTAN
  VATICAN_CITY
  SAINT_VINCENT_AND_THE_GRENADINES
  VENEZUELA
  BRITISH_VIRGIN_ISLANDS
  US_VIRGIN_ISLANDS
  VIETNAM
  VANUATU
  WALLIS_AND_FUTUNA
  SAMOA
  KOSOVO
  YEMEN
  MAYOTTE
  SOUTH_AFRICA
  ZAMBIA
  ZIMBABWE

  @@map("countries")
  @@schema("public")
}
